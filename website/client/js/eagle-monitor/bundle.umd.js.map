{"version":3,"file":"bundle.umd.js","sources":["../../../../eagle-sdk/resource.js","../../../../eagle-sdk/xhr.js","../../../../eagle-sdk/beh.js","../../../../eagle-sdk/index.js"],"sourcesContent":["// --------------------------------------------静态资源性能功能-----------------------------------\r\nimport Util from \"./util\";\r\n\r\nlet resolvePerformanceResource = (resourceData) => {\r\n  let r = resourceData;\r\n  let data = {\r\n    initiatorType: r.initiatorType,\r\n    name: r.name,\r\n    duration: parseInt(r.duration),// 持续时长\r\n\r\n    // 连接过程 \r\n    redirect: r.redirectEnd - r.redirectStart,// 重定向\r\n    dns: r.domainLookupEnd - r.domainLookupStart,// DNS查找\r\n    connect: r.connectEnd - r.connectStart,// TCP建连\r\n    network: r.connectEnd - r.startTime,// 网络总耗时\r\n\r\n    // 接收过程\r\n    send: r.responseStart - r.requestStart,// 发送开始到接收开始的总时长\r\n    recevie: r.responseEnd - r.responseStart,// 接收的总时长\r\n    request: r.responseEnd - r.requestStart,// 接收总耗时\r\n\r\n    // 核心指标\r\n    ttfb: r.responseStart - r.requestStart,// 首字节接收耗时\r\n  };\r\n  return data;\r\n}\r\n\r\n// 帮助我们循环获得每一个资源的性能数据\r\nlet resolveEnties = (entries) => entries.map((v) => resolvePerformanceResource(v));\r\n\r\n\r\nexport default {\r\n  init: (cb) => {\r\n\r\n\r\n    if (window.PerformanceObserver) {\r\n      debugger;\r\n      // 动态获取每一个资源信息\r\n      let observer = new window.PerformanceObserver((list) => {\r\n        try {\r\n          let entries = list.getEntries();\r\n          let entiesData = resolveEnties(entries);\r\n          cb(entiesData);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      });\r\n      observer.observe({ entryTypes: [\"resource\"] });// 给observer添加监听，监听性能条目类型\r\n    } else {// 在onload之后获取所有的资源信息\r\n      Util.onload(() => {\r\n        let entries = performance.getEntriesByType(\"resource\");\r\n        let entiesData = resolveEnties(entries);\r\n        cb(entiesData);\r\n      });\r\n    }\r\n    // debugger;\r\n  },\r\n};","//---------------------------------------------------------------------------------api接口请求功能性能\r\n\r\nexport default {\r\n// TODO 自身的请求无需拦截\r\n\r\n  init: (cb) => {\r\n    // xhr hook ------------------------------------开始\r\n    let xhr = window.XMLHttpRequest;\r\n    if (xhr._eagle_monitor_flag === true) {\r\n      return void 0;\r\n    }\r\n    xhr._eagle_monitor_flag = true;\r\n\r\n    //更改xhr 原型上的open方法：\r\n    let _originOpen = xhr.prototype.open;\r\n    xhr.prototype.open = function (method, url, async, user, password) {\r\n      debugger;\r\n      // 要上报的数据_eagle_xhr_info\r\n      this._eagle_xhr_info = { method, url, status: null };\r\n      return _originOpen.apply(this, arguments);// 调用本来open的逻辑\r\n    }\r\n\r\n    // 更改xhr 原型上的send方法\r\n    let _originSend = xhr.prototype.send;\r\n    xhr.prototype.send = function (value) {\r\n      // debugger;\r\n      let _self = this;// 给this设置变量\r\n      this._eagle_start_time = Date.now();// 记录方法开始执行时间\r\n\r\n      // 定义上报方法:定义高阶函数（函数返回函数）\r\n      let ajaxEnd = (eventType) => () => {\r\n        if (_self.response) {\r\n          let responseSize = null;// 定义返回res的长度\r\n          switch (_self.responseType) {// 根据res 的返回类型，获取responseSize\r\n            case \"json\":// TODO :JSON 有兼容性问题 && stringify报错问题\r\n              responseSize = JSON.stringify(_self.response).length;\r\n              break;\r\n            case \"arraybuffer\":// byteLength 是获取buffer长度的属性\r\n              responseSize = _self.response.byteLength;\r\n              break;\r\n            default:\r\n              responseSize = _self.responseText.length;\r\n              break;\r\n          }\r\n          _self._eagle_xhr_info.event = eventType;\r\n          _self._eagle_xhr_info.status = _self.status;\r\n          _self._eagle_xhr_info.success = _self.status === 200;\r\n          _self._eagle_xhr_info.duration = Date.now() - this._eagle_start_time;\r\n          _self._eagle_xhr_info.responseSize = responseSize;\r\n          _self._eagle_xhr_info.type = \"xhr\";\r\n          _self._eagle_xhr_info.requestSize = value ? value.length : 0;// TODO：一定确保value 有length属性，（数字，布尔，null ,undefinde 没有此属性，进行兼容判断）\r\n          cb(_self._eagle_xhr_info);\r\n        }\r\n      }\r\n\r\n      // 以下三种状态都代表着请求已经结束了，需要统计一些信息并上报(TODO：addEventListener兼容性问题)\r\n      this.addEventListener(\"load\", ajaxEnd(\"load\"), false);// 加载完成\r\n      this.addEventListener(\"error\", ajaxEnd(\"error\"), false);// 失败\r\n      this.addEventListener(\"abort\", ajaxEnd(\"abort\"), false);//主动取消停止\r\n      return _originSend.apply(this, arguments); //调用本来send的逻辑\r\n    }\r\n    // xhr hook ------------------------------------结束\r\n\r\n\r\n\r\n    // fetch hook ------------------------------------开始\r\n    if (window.fetch) {\r\n      let _originFetch = window.fetch;\r\n      window.fetch = function () {\r\n        let startTime = Date.now();\r\n        let args = [].slice.call(arguments);// 将类数组arguments转为数组，并且从0位开始截取到最后\r\n\r\n        let method = \"GET\";\r\n        let url = null;\r\n\r\n        let fetchInput = args[0];\r\n        if (typeof fetchInput == \"string\") {\r\n          url = fetchInput;\r\n        } else if (\"Request\" in window && fetchInput instanceof window.Request) {\r\n          url = fetchInput.url;\r\n          if (fetchInput.method) {\r\n            method = fetchInput.method;\r\n          }\r\n        } else {\r\n          url = \"\" + fetchInput;\r\n        }\r\n\r\n\r\n        // 要上报的数据\r\n        let eagleFetchData = {\r\n          url, method, status: null\r\n        };\r\n        \r\n        return _originFetch.apply(this, args).then((response) => { // fetch 的api是基于promise 设计的，所以可以使用then\r\n          eagleFetchData.status = response.status;\r\n          eagleFetchData.type = \"fetch\";\r\n          eagleFetchData.duration = Date.now() - startTime;\r\n          cb(eagleFetchData);\r\n          return response;\r\n        });\r\n\r\n      }\r\n    }\r\n    // fetch hook ------------------------------------结束\r\n\r\n  }\r\n}\r\n\r\n// 备注：所有的电脑都会支持xhr ，不是所有的电脑都支持fetch(所以得进行判断是否支持 window.fetch)","//------------------------------------------------用户行为监控\r\n// 获取本元素是兄弟元素中的第几个，返回 如：li[2]\r\nlet getIndex = (ele) => {\r\n  // 获取同级兄弟元素（包含自己）\r\n  let children = [].slice.call(ele.parentNode.children);\r\n\r\n  let myindex = null;\r\n  // 过滤兄弟元素数组，过滤出跟自己标签名一致的兄弟元素\r\n  children = children.filter(node => node.tagName == ele.tagName);\r\n  // 获取ele元素的在兄弟元素中的index\r\n  for (var i = 0; i < children.length; i++) {\r\n    if (ele == children[i]) {\r\n      myindex = i;\r\n    }\r\n  }\r\n  // for 的i是从0开始的，所以得加1\r\n  myindex = `[${myindex + 1}]`;\r\n\r\n  // 获取大写标签名\r\n  let tagName = ele.tagName.toLocaleLowerCase();\r\n\r\n  let myLabel = tagName + myindex;\r\n  return myLabel;\r\n}\r\n// 获取标签如  ul[2]/li[1]\r\nlet getXpath = (ele) => {\r\n  let xpath = \"\";\r\n  let currentEle = ele;\r\n  while (currentEle != document.body) {\r\n    let lastPath = xpath ? `/${xpath}` : \"\";\r\n    xpath = getIndex(currentEle) + lastPath;\r\n    currentEle = currentEle.parentNode;\r\n\r\n  }\r\n  return xpath;\r\n}\r\n\r\nexport default {\r\n  init: (cb) => {\r\n    document.addEventListener(\"click\", e => {\r\n      let target = e.target;\r\n      let xpath = getXpath(target);\r\n      cb(xpath);\r\n    });\r\n  }\r\n}","import perf from \"./perf.js\";\r\nimport resource from \"./resource.js\";\r\nimport xhr from \"./xhr.js\";\r\nimport errorCatch from \"./errorCatch.js\";\r\nimport beh from \"./beh.js\";\r\n// perf.init((obj) => {\r\n//   console.log(obj);\r\n// });\r\n\r\n\r\n// resource.init((obj) => {\r\n//   console.log(obj);\r\n// });\r\n\r\n// xhr.init((obj) => {\r\n//   console.log(obj);\r\n// });\r\n\r\n// errorCatch.init((obj) => {\r\n//   console.log(obj);\r\n// });\r\n\r\nbeh.init(obj => {\r\n  console.log(obj);\r\n  // 实现错误上报功能\r\n  new Image(\"http://ddddddd.gif?type=error&data=`${obj}`\");\r\n});\r\n"],"names":[],"mappings":";;;;;;EAAA,0FAA0F;;ECA1F;AACA,AA0GA;EACA;;EC5GA;EACA;EACA,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK;EACxB;EACA,EAAE,IAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;;EAExD,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC;EACrB;EACA,EAAE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;EAClE;EACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC5C,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;EAC5B,MAAM,OAAO,GAAG,CAAC,CAAC;EAClB,KAAK;EACL,GAAG;EACH;EACA,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE/B;EACA,EAAE,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;;EAEhD,EAAE,IAAI,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;EAClC,EAAE,OAAO,OAAO,CAAC;EACjB,EAAC;EACD;EACA,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK;EACxB,EAAE,IAAI,KAAK,GAAG,EAAE,CAAC;EACjB,EAAE,IAAI,UAAU,GAAG,GAAG,CAAC;EACvB,EAAE,OAAO,UAAU,IAAI,QAAQ,CAAC,IAAI,EAAE;EACtC,IAAI,IAAI,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;EAC5C,IAAI,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;EAC5C,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;;EAEvC,GAAG;EACH,EAAE,OAAO,KAAK,CAAC;EACf,EAAC;;AAED,YAAe;EACf,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK;EAChB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,IAAI;EAC5C,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;EAC5B,MAAM,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;EACnC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;EAChB,KAAK,CAAC,CAAC;EACP,GAAG;EACH;;GAAC,DCxCD;EACA;EACA;;;EAGA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI;EAChB,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACnB;EACA,EAAE,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;EAC3D,CAAC,CAAC,CAAC;;;;"}